import subprocess
import json
import argparse
import itertools
import threading
import time

stop_spinner = False

def spinner():
    spinner_cycle = itertools.cycle(["|", "/", "-", "\\"])
    while not stop_spinner:
        print(f"\r[+] Enumerando SMB... {next(spinner_cycle)}", end="")
        time.sleep(0.2)  # Velocidad del spinner

def read_scan_results(input_file):
    with open(input_file, "r") as json_file:
        scan_data = json.load(json_file)
    smb_targets = []
    for host in scan_data["hosts"]:
        for port in host["open_ports"]:
            if port["port"] == 445:  # Verificar si tiene SMB abierto
                smb_targets.append(host["ip"])
    return smb_targets

def run_cme_smb(target_ip):
    print(f"[+] Enumerando SMB en {target_ip}")
    smb_info = {}
    
    # Enumerar información básica de SMB
    global stop_spinner
    stop_spinner = False
    spinner_thread = threading.Thread(target=spinner)
    spinner_thread.start()  # Iniciar el spinner

    cme_command = ["crackmapexec", "smb", target_ip]
    try:
        result = subprocess.run(cme_command, capture_output=True, text=True, check=True)
        stop_spinner = True  # Detener el spinner
        spinner_thread.join()
        smb_info["basic_info"] = result.stdout
    except subprocess.CalledProcessError as e:
        stop_spinner = True
        spinner_thread.join()
        print(f"[-] Error en enumeración básica: {e}")
    
    # Enumerar recursos compartidos con autenticación anónima
    stop_spinner = False
    spinner_thread = threading.Thread(target=spinner)
    spinner_thread.start()

    cme_shares = ["crackmapexec", "smb", target_ip, "-u", "", "-p", "", "--shares"]
    try:
        result = subprocess.run(cme_shares, capture_output=True, text=True, check=True)
        stop_spinner = True  # Detener el spinner
        spinner_thread.join()
        smb_info["shares"] = result.stdout
    except subprocess.CalledProcessError as e:
        stop_spinner = True
        spinner_thread.join()
        print(f"[-] Error en enumeración de shares: {e}")
    
    # Enumerar usuarios en SMB
    stop_spinner = False
    spinner_thread = threading.Thread(target=spinner)
    spinner_thread.start()

    cme_users = ["crackmapexec", "smb", target_ip, "--users"]
    try:
        result = subprocess.run(cme_users, capture_output=True, text=True, check=True)
        stop_spinner = True  # Detener el spinner
        spinner_thread.join()
        smb_info["users"] = result.stdout
    except subprocess.CalledProcessError as e:
        stop_spinner = True
        spinner_thread.join()
        print(f"[-] Error en enumeración de usuarios: {e}")
    
    return smb_info

def exploit_smb(input_file, output_file):
    smb_targets = read_scan_results(input_file)
    all_smb_results = {}
    
    for target in smb_targets:
        smb_results = run_cme_smb(target)
        all_smb_results[target] = smb_results
    
    with open(output_file, "w") as json_file:
        json.dump(all_smb_results, json_file, indent=4)
    
    print(f"[+] Resultados de SMB guardados en {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Módulo de Explotación de SMB con CrackMapExec")
    parser.add_argument("--input", required=True, help="Archivo JSON del reconocimiento (scan_results.json)")
    parser.add_argument("--output", default="smb_results.json", help="Archivo de salida para guardar resultados")
    args = parser.parse_args()
    
    exploit_smb(args.input, args.output)
