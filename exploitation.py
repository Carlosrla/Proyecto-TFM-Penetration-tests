import subprocess
import json
import argparse
import itertools
import threading
import time
from datetime import datetime

stop_spinner = False

def spinner():
    spinner_cycle = itertools.cycle(["|", "/", "-", "\\"])
    while not stop_spinner:
        print(f"\r[+] Enumerando SMB Avanzado... {next(spinner_cycle)}", end="")
        time.sleep(0.2)  # Velocidad del spinner

def read_scan_results(input_file):
    with open(input_file, "r") as json_file:
        scan_data = json.load(json_file)
    smb_targets = []
    for host in scan_data["hosts"]:
        for port in host["open_ports"]:
            if port["port"] == 445:  # Verificar si tiene SMB abierto
                smb_targets.append(host["ip"])
    return smb_targets

def load_smb_credentials(creds_file):
    try:
        with open(creds_file, "r") as json_file:
            creds_data = json.load(json_file)
            return creds_data
    except FileNotFoundError:
        print("[-] No se encontró smb_creds.json. Probando con credenciales comunes.")
        return []

def run_cme_command(command):
    global stop_spinner
    stop_spinner = False
    spinner_thread = threading.Thread(target=spinner)
    spinner_thread.start()  # Iniciar el spinner

    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        stop_spinner = True  # Detener el spinner
        spinner_thread.join()
        return result.stdout
    except subprocess.CalledProcessError as e:
        stop_spinner = True
        spinner_thread.join()
        print(f"[-] Error en enumeración avanzada: {e}")
        return "Error"

def smb_advanced_enum(target_ip, creds):
    smb_info = {}
    creds_used = None
    
    # Probar con credenciales si existen
    if creds:
        for cred in creds:
            user = cred["user"]
            password = cred["pass"]
            print(f"[+] Probando credenciales en {target_ip} → Usuario: {user}, Contraseña: {password}")
            cme_command = ["crackmapexec", "smb", target_ip, "-u", user, "-p", password]
            result = run_cme_command(cme_command)
            if "STATUS_SUCCESS" in result:
                creds_used = {"user": user, "pass": password}
                print(f"[+] Credenciales válidas encontradas: {user}:{password}")
                break
    
    # Si no hay credenciales válidas, probar enumeración anónima
    if not creds_used:
        print("[+] Intentando enumeración anónima.")
        creds_used = {"user": "", "pass": ""}
    
    # Enumerar permisos detallados en recursos compartidos
    print(f"[+] Enumerando permisos en recursos compartidos para {target_ip}")
    cme_shares = ["crackmapexec", "smb", target_ip, "-u", creds_used["user"], "-p", creds_used["pass"], "--shares", "--group"]
    smb_info["shares"] = run_cme_command(cme_shares)
    
    # Enumerar sesiones activas
    print(f"[+] Enumerando sesiones activas en {target_ip}")
    cme_sessions = ["crackmapexec", "smb", target_ip, "-u", creds_used["user"], "-p", creds_used["pass"], "--sessions"]
    smb_info["sessions"] = run_cme_command(cme_sessions)
    
    # Enumerar políticas de contraseñas
    print(f"[+] Enumerando políticas de contraseñas en {target_ip}")
    cme_passpol = ["crackmapexec", "smb", target_ip, "-u", creds_used["user"], "-p", creds_used["pass"], "--pass-pol"]
    smb_info["password_policy"] = run_cme_command(cme_passpol)
    
    smb_info["used_credentials"] = creds_used
    return smb_info

def smb_enum_advanced(input_file, output_file, creds_file):
    smb_targets = read_scan_results(input_file)
    creds = load_smb_credentials(creds_file)
    all_smb_results = {}
    
    for target in smb_targets:
        smb_results = smb_advanced_enum(target, creds)
        all_smb_results[target] = smb_results
    
    with open(output_file, "w") as json_file:
        json.dump(all_smb_results, json_file, indent=4)
    
    print(f"[+] Resultados de enumeración avanzada de SMB guardados en {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Enumeración Avanzada de SMB con CrackMapExec y Prueba de Credenciales")
    parser.add_argument("--input", required=True, help="Archivo JSON del reconocimiento (scan_results.json)")
    parser.add_argument("--output", default="smb_enum_adv.json", help="Archivo de salida para guardar resultados")
    parser.add_argument("--creds", default="smb_creds.json", help="Archivo de credenciales detectadas")
    args = parser.parse_args()
    
    smb_enum_advanced(args.input, args.output, args.creds)