import subprocess  # Para ejecutar comandos externos, como searchsploit
import json  # Para manejar datos en formato JSON
import os  # Para manipular rutas y crear directorios si no existen

def search_exploits(service_name, service_version, output_file="results/exploits.json"):
    """
    Busca exploits para un servicio y versión específicos usando searchsploit.
    :param service_name: Nombre del servicio (por ejemplo, "ssh").
    :param service_version: Versión del servicio (por ejemplo, "2019.78").
    :param output_file: Ruta para guardar los resultados.
    """

    # Crea el directorio donde se guardarán los resultados, si no existe
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    # Muestra en pantalla que se está buscando exploits para el servicio dado
    print(f"[+] Buscando exploits para {service_name} {service_version}...")

    # Construye el comando para ejecutar searchsploit con salida en formato JSON
    search_command = ["searchsploit", service_name, service_version, "--json"]

    try:
        # Ejecuta el comando y guarda la salida JSON
        search_output = subprocess.run(search_command, capture_output=True, text=True, check=True)

        # Parsea la salida JSON de searchsploit
        exploits = json.loads(search_output.stdout)

        # Si se encontraron exploits, se guardan en un archivo JSON
        if exploits:
            with open(output_file, "w") as f:
                json.dump(exploits, f, indent=4)  # Guarda los datos formateados
            print(f"[+] Exploits guardados en {output_file}")
        else:
            # Si no se encuentra ningún exploit, se informa al usuario
            print("[-] No se encontraron exploits.")
    
    except subprocess.CalledProcessError as e:
        # En caso de error al ejecutar el comando, se muestra un mensaje de error
        print(f"[-] Error buscando exploits: {e}")
